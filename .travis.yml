language: c
os:
  - linux
  - osx

dist: bionic
# Valgrind currently supports upto macOS 10.13, the latest xcode of that version is 10.1
osx_image: xcode10.1
addons:
  apt:
    packages:
      - gcc-multilib
      - libc6-dbg:i386
      - libgmp-dev
      - libgmp-dev:i386
      - libtool-bin
      - ninja-build
      - valgrind
  homebrew:
    packages:
      - cmake
      - gmp
      - ninja
      - valgrind
    update: true
install:
  - if [ "${TRAVIS_OS_NAME}" = "linux" ] && [ "${TRAVIS_CPU_ARCH}" = "amd64" ]; then ./travis/install_cmake.sh; fi
  - if [ "${TRAVIS_OS_NAME}" = "osx" ]; then HOMEBREW_NO_AUTO_UPDATE=1 brew install gcc@9; fi
cache:
  directories:
    - /opt/cmake
compiler:
  - clang
  - gcc
env:
  global:
    - WIDEMUL=auto
    - BIGNUM=gmp
    - ENDOMORPHISM=no
    - STATICPRECOMPUTATION=yes
    - ECMULTGENPRECISION=auto
    - ASM=no
    - AUTOTOOLS_TARGET=check
    - CMAKE_TARGET=check-secp256k1
    - AUTOTOOLS_EXTRA_FLAGS=
    - CMAKE_EXTRA_FLAGS=
    - WITH_VALGRIND=yes
    - RUN_VALGRIND=no
    - HOST=
    - ECDH=no
    - RECOVERY=no
    - SCHNORR=yes
    - SCHNORRSIG=no
    - EXPERIMENTAL=no
    - JNI=no
    - OPENSSL_TESTS=auto
    - MULTISET=no
    - CTIMETEST=yes
    - BENCH=yes
    - ITERS=2
  jobs:
    - WIDEMUL=int64   RECOVERY=yes
    - WIDEMUL=int64   ECDH=yes  EXPERIMENTAL=yes  MULTISET=yes SCHNORRSIG=yes
    - WIDEMUL=int64   ENDOMORPHISM=yes
    - WIDEMUL=int128
    - WIDEMUL=int128  RECOVERY=yes EXPERIMENTAL=yes SCHNORRSIG=yes
    - WIDEMUL=int128  ENDOMORPHISM=yes
    - WIDEMUL=int128  ENDOMORPHISM=yes  ECDH=yes  EXPERIMENTAL=yes  MULTISET=yes SCHNORRSIG=yes
    - WIDEMUL=int128                    ASM=x86_64
    - WIDEMUL=int128  ENDOMORPHISM=yes  ASM=x86_64
    - BIGNUM=no
    - BIGNUM=no       ENDOMORPHISM=yes  RECOVERY=yes  EXPERIMENTAL=yes  MULTISET=yes SCHNORRSIG=yes
    - BIGNUM=no       STATICPRECOMPUTATION=no
    - AUTOTOOLS_TARGET=distcheck       CMAKE_TARGET=install WITH_VALGRIND=no CTIMETEST=no BENCH=no
    - AUTOTOOLS_EXTRA_FLAGS=CPPFLAGS=-DDETERMINISTIC CMAKE_EXTRA_FLAGS=-DCMAKE_C_FLAGS=-DDETERMINISTIC
    - AUTOTOOLS_EXTRA_FLAGS=CFLAGS=-O0               CMAKE_EXTRA_FLAGS=-DCMAKE_BUILD_TYPE=Debug CTIMETEST=no
    - AUTOTOOLS_TARGET=check-java      CMAKE_TARGET=check-secp256k1-java JNI=yes ECDH=yes EXPERIMENTAL=yes WITH_VALGRIND=no CTIMETEST=no BENCH=no
    - ECMULTGENPRECISION=2
    - ECMULTGENPRECISION=8
    - RUN_VALGRIND=yes
      BIGNUM=no ENDOMORPHISM=yes ASM=x86_64 EXPERIMENTAL=yes ECDH=yes RECOVERY=yes OPENSSL_TESTS=no MULTISET=yes
      AUTOTOOLS_TARGET=
      CMAKE_EXTRA_FLAGS=-DCMAKE_C_FLAGS=-DVALGRIND CMAKE_TARGET="secp256k1-tests secp256k1-exhaustive_tests"
    # The same as above but without endomorphism.
    - RUN_VALGRIND=yes
      BIGNUM=no                  ASM=x86_64 EXPERIMENTAL=yes ECDH=yes RECOVERY=yes OPENSSL_TESTS=no MULTISET=yes
      AUTOTOOLS_TARGET=
      CMAKE_EXTRA_FLAGS=-DCMAKE_C_FLAGS=-DVALGRIND CMAKE_TARGET="secp256k1-tests secp256k1-exhaustive_tests"
    - SCHNORR=no
jobs:
  fast_finish: true
  include:
    - compiler: clang
      os: linux
      env: HOST=i686-linux-gnu ENDOMORPHISM=yes OPENSSL_TESTS=no
    - compiler: clang
      os: linux
      env: HOST=i686-linux-gnu BIGNUM=no OPENSSL_TESTS=no
    - compiler: gcc
      os: linux
      env: HOST=i686-linux-gnu ENDOMORPHISM=yes BIGNUM=no OPENSSL_TESTS=no
    - compiler: gcc
      os: linux
      env: HOST=i686-linux-gnu OPENSSL_TESTS=no
    # S390x build (big endian system)
    - dist: focal
      compiler: gcc
      env: HOST=s390x-unknown-linux-gnu OPENSSL_TESTS=no ECDH=yes RECOVERY=yes EXPERIMENTAL=yes MULTISET=yes CTIMETEST=no
      arch: s390x
      addons:
        apt:
          packages:
            - cmake
            - libgmp-dev
            - libtool-bin
            - ninja-build
            - valgrind

before_script:
  # This limits the iterations in the benchmarks below to ITER iterations.
  - export SECP256K1_BENCH_ITERS="$ITERS"

# travis auto terminates jobs that go for 10 minutes without printing to stdout,
# but travis_wait doesn't work well with forking programs like valgrind
# (https://docs.travis-ci.com/user/common-build-problems/#build-times-out-because-no-output-was-received https://github.com/bitcoin-core/secp256k1/pull/750#issuecomment-623476860)
script:
  - function keep_alive() { while true; do echo -en "\a"; sleep 60; done }
  - keep_alive &
  - ./travis/build_autotools.sh
  - ./travis/build_cmake.sh
  - kill %keep_alive

after_script:
  - valgrind --version
